#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <gsl/gsl_linalg.h>


#include "B-splines.c"

int         N = 7;
double      X0 = -1.,
            X1 =  1.,
            Y0 = -1.,
            Y1 =  1.,
            stepx, stepy, diff_step, glob_delta;


double right_part_f(double x, double y)
{
      return 12.*(y*y*(x*x*x*x-1.) + x*x*(y*y*y*y-1.));
}

double omega(double x, double y)
{
/*	return (x-X0)*(x-X1)*(y-Y0)*(y-Y1);*/
      return (x*x-1.)*(y*y-1.);
}

double phi(double x, double y, int n)
{
      return f_B_3((x-X0-stepx*(double)(1+n/N))/stepx)*
             f_B_3((y-Y0-(double)(1+n%N)*stepy)/stepy);
}

double basis(double x, double y, int n)
{
	return phi(x,y,n)*omega(x,y);
}

double laplacian_basis(double x, double y, int n)
{
      return glob_delta*glob_delta*(basis(x+diff_step,y,n)+basis(x-diff_step,y,n)+
                                    basis(x,y+diff_step,n)+basis(x,y-diff_step,n)
                                -4.*basis(x,y,n));
}

void form_matrix
     (gsl_matrix * system, 
      gsl_vector * RightPart, 
      double x1, double x2, 
      double y1, double y2)
{
	int i, j;
	for(i = 0; i < N; i++)
	{
		gsl_vector_set(RightPart, i, right_part_f(x1+stepx*(double)(i+1), 
		                                          y1+stepy*(double)(j+1)));
		for(j = 0; j < N; j++)
		{
			gsl_matrix_set(system, i,j, laplacian_basis(
			            x1+stepx*(double)(i+1),
			            y1+stepy*(double)(j+1), N*i+j));
		}
	}
}

void solve_matrix_eq
     (gsl_vector * solution, 
      gsl_matrix * system, 
      gsl_vector * RightPart)
//Solve SLE Ax=b, where A = system, b = RightPart, x = solution
{
	int i;

	gsl_permutation * p = gsl_permutation_alloc (N);
	gsl_linalg_LU_decomp (system, p, &i);
	gsl_linalg_LU_solve (system, p, RightPart, solution);
}

double reconstruct_at(gsl_vector *solution, double x, double y)
// Reconstucts value of solution at point (x,y)
{
	int i; double result = 0.;
	for(i=0; i<N; i++)
	{
		result += gsl_vector_get(solution, i)*basis(x,y,i);
	}
	return result;
}

double plot_region
     (gsl_vector *solution, 
      double x1, double x2, 
      double y1, double y2)
// Plot solution in rectangle region 
// from x1 till x2 by x, and from y1 till y2 by y

{
	double	hx = (x2-x1)/64.,
			hy = (y2-y1)/64.,
			i,j;
	FILE * op;
	op = fopen("../plot_data/plot_region", "w");
	for(i=x1; i<=x2; i+=hx)
		for(j=y1; j<=y2; j+=hy)
			fprintf(op, "%f %f %f\n", i,j, reconstruct_at(solution,i,j));
	fclose(op);
}


int main()
{
      stepx = (X1-X0)/(double)(2*N);
      stepy = (Y1-Y0)/(double)(2*N);
      N = 2*N-1;
      diff_step = pow(2.,-3);
	glob_delta = 1./diff_step;
      
      
      gsl_matrix 	*sys 		= gsl_matrix_alloc (N,N);;
	gsl_vector  *rightpart	= gsl_vector_alloc(N),
			*solution	= gsl_vector_alloc(N);
	int i, j;
	for(i = 0; i < N; i++)
	{
		for(j = 0; j < N; j++)
		{
			printf("%f %f %f\n", X0+stepx*(double)(i+1),
			                     Y0+stepy*(double)(j+1), 
			                     basis(
			                        X0+stepx*(double)(i+1),
			                        Y0+stepy*(double)(j+1), N*i+j));

		}
	}
	form_matrix		(sys, rightpart, X0,X1, Y0,Y1);
	
	FILE *op;
	op = fopen("./matrix", "w");
	gsl_matrix_fprintf(op, sys, "%f");
	fclose(op);
	
	solve_matrix_eq	(solution, sys, rightpart);
	
	plot_region		(solution, X0,X1, Y0,Y1);
	system("./Plot");	
      
      
      return 0;
}
